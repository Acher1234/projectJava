Index: src/elements/Camera.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package elements;\n\nimport geometries.Plane;\nimport primitives.Point3D;\nimport primitives.Ray;\nimport primitives.Vector;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * The type Camera.\n */\npublic class Camera {\n    /**\n     * The Origins.\n     */\n//----------------Variable----------------\n    protected Point3D Origins;\n    /**\n     * The Vup.\n     */\n    protected Vector Vup;\n    /**\n     * The Vto.\n     */\n    protected Vector Vto;\n    /**\n     * The Vright.\n     */\n    protected Vector Vright;\n    //--------------Methode--------\n\n    /**\n     * Instantiates a new Camera.\n     *\n     * @param origins the origins\n     * @param vup     the vup\n     * @param vto     the vto\n     */\n    public Camera(Point3D origins, Vector vto, Vector vup) {\n        if(vup.dotProduct(vto) != 0)\n        {\n            throw new IllegalArgumentException(\"bad Vector for camera\");\n        }\n        Origins = origins;\n        Vup = vup.normalize();\n        Vto = vto.normalize();\n        Vright = vto.crossProduct(vup).normalize();\n    }\n\n    /**\n     * Construct ray through pixel ray.\n     *\n     * @param nX             the n x\n     * @param nY             the n y\n     * @param j              the j\n     * @param i              the\n     * @param screenDistance the screen distance\n     * @param screenWidth    the screen width\n     * @param screenHeight   the screen height\n     * @return the ray\n     */\n    public List<Ray> constructRayThroughPixel (int nX, int nY, int j, int i, double screenDistance, double screenWidth, double screenHeight)\n    {\n        int numberOnXAndY = 3;\n        int scaleloop = (numberOnXAndY/2);\n        int NearIndex = 1;\n        List<Ray> returnList= new ArrayList<Ray>();\n        double sizeBetweenPixelWidht = screenWidth / nX /2;\n        double sizeBetweenPixelHeight = screenHeight / nY /2;\n        for (double loop = 0;loop<numberOnXAndY;loop++ )\n        {\n            Point3D Pc = this.Origins.Add((this.Vto.scale(screenDistance)));\n            Point3D ResultOnX = new Point3D(Pc);\n            Point3D ResultOnY = new Point3D(Pc);\n            double ToScaleJOnX = ((j - (((double)(nX - 1)) / 2) * (screenWidth / nX)));\n            double ToScaleIOnX = (i - (((double)(nY - 1)) / 2)  * (screenHeight / nY));\n            if(ToScaleJOnX != 0)\n            {\n                ResultOnX =  ResultOnX.Add((this.Vright.scale(ToScaleJOnX)));\n            }\n            if(ToScaleIOnX != 0)\n            {\n                ResultOnX = ResultOnX.Add(this.Vup.scale(-ToScaleIOnX));\n            }\n            returnList.add(new Ray(ResultOnX.subtract(this.Origins),this.Origins));\n        }\n        return returnList;\n    }\n    //-------------GET--------\n\n\n    /**\n     * Gets origins.\n     *\n     * @return the origins\n     */\n    public Point3D getOrigins() {\n        return Origins;\n    }\n\n    /**\n     * Gets vup.\n     *\n     * @return the vup\n     */\n    public Vector getVup() {\n        return Vup;\n    }\n\n    /**\n     * Gets vto.\n     *\n     * @return the vto\n     */\n    public Vector getVto() {\n        return Vto;\n    }\n\n    /**\n     * Gets vright.\n     *\n     * @return the vright\n     */\n    public Vector getVright() {\n        return Vright;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/elements/Camera.java	(revision e284bc1ef5a5b6d1cc1d6926b7eeb19bf6e093aa)
+++ src/elements/Camera.java	(date 1592559369231)
@@ -75,8 +75,8 @@
             Point3D Pc = this.Origins.Add((this.Vto.scale(screenDistance)));
             Point3D ResultOnX = new Point3D(Pc);
             Point3D ResultOnY = new Point3D(Pc);
-            double ToScaleJOnX = ((j - (((double)(nX - 1)) / 2) * (screenWidth / nX)));
-            double ToScaleIOnX = (i - (((double)(nY - 1)) / 2)  * (screenHeight / nY));
+            double ToScaleJOnX = ((j - (((double)(nX - 1))) * (screenWidth / nX)));
+            double ToScaleIOnX = (i - (((double)(nY - 1)))  * (screenHeight / nY));
             if(ToScaleJOnX != 0)
             {
                 ResultOnX =  ResultOnX.Add((this.Vright.scale(ToScaleJOnX)));
