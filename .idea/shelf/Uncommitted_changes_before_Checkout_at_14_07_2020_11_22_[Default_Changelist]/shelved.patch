Index: src/unittests/ShadowTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/unittests/ShadowTests.java	(date 1594714867951)
+++ src/unittests/ShadowTests.java	(date 1594714867951)
@@ -0,0 +1,177 @@
+package unittests;
+
+import org.junit.Test;
+
+import elements.*;
+import geometries.*;
+import primitives.*;
+import renderer.*;
+import scene.Scene;
+
+/**
+ * Testing basic shadows
+ * 
+ * @author Dan
+ */
+public class ShadowTests {
+
+	/**
+	 * Produce a picture of a sphere and triangle with point light and shade
+	 */
+	@Test
+	public void SphereTriangleInitial() {
+		Scene scene = new Scene("Test scene");
+		scene.setCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)));
+		scene.setDistance(1000);
+		scene.setBackground(Color.BLACK);
+		scene.setAmbientLight(new AmbientLight(Color.BLACK, 0));
+
+		scene.addGeometries(new Sphere(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 30,1,0), //
+				60, new Point3D(0, 0, 200)), //
+				new Triangle(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 30), //
+						new Point3D(-70, 40, 0), new Point3D(-40, 70, 0), new Point3D(-68, 68, 4)));
+
+		scene.addLights(new SpotLight(new Color(400, 240, 0), //
+				new Point3D(-100, 100, -200), new Vector(1, -1, 3), 1, 1E-5, 1.5E-7));
+
+		ImageWriter imageWriter = new ImageWriter("sphereTriangleInitial", 200, 200, 400, 400);
+		Render render = new Render(imageWriter, scene);
+
+		render.renderImage();
+		render.writeToImage();
+	}
+
+	/**
+	 * Sphere-Triangle shading - move triangle up-right
+	 */
+	@Test
+	public void SphereTriangleMove1() {
+		Scene scene = new Scene("Test scene");
+		scene.setCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)));
+		scene.setDistance(1000);
+		scene.setBackground(Color.BLACK);
+		scene.setAmbientLight(new AmbientLight(Color.BLACK, 0));
+
+		scene.addGeometries(new Sphere(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 30), //
+				60, new Point3D(0, 0, 200)), //
+				new Triangle(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 30), //
+						new Point3D(-70, 40, 0), new Point3D(-40, 70, 0), new Point3D(-68, 68, 4)));
+
+		scene.addLights(new SpotLight(new Color(400, 240, 0), //
+				new Point3D(-100, 100, -200), new Vector(1, -1, 3), 1, 1E-5, 1.5E-7));
+
+		ImageWriter imageWriter = new ImageWriter("sphereTriangleMove1", 200, 200, 400, 400);
+		Render render = new Render(imageWriter, scene);
+
+		render.renderImage();
+		render.writeToImage();
+	}
+	
+	/**
+	 * Sphere-Triangle shading - move triangle upper-righter
+	 */
+	@Test
+	public void SphereTriangleMove2() {
+		Scene scene = new Scene("Test scene");
+		scene.setCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)));
+		scene.setDistance(1000);
+		scene.setBackground(Color.BLACK);
+		scene.setAmbientLight(new AmbientLight(Color.BLACK, 0));
+
+		scene.addGeometries(new Sphere(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 30), //
+				60, new Point3D(0, 0, 200)), //
+				new Triangle(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 30), //
+						new Point3D(-70, 40, 0), new Point3D(-40, 70, 0), new Point3D(-68, 68, 4)));
+
+		scene.addLights(new SpotLight(new Color(400, 240, 0), //
+				new Point3D(-100, 100, -200), new Vector(1, -1, 3), 1, 1E-5, 1.5E-7));
+
+		ImageWriter imageWriter = new ImageWriter("sphereTriangleMove2", 200, 200, 400, 400);
+		Render render = new Render(imageWriter, scene);
+
+		render.renderImage();
+		render.writeToImage();
+	}
+
+	/**
+	 * Sphere-Triangle shading - move spot closer
+	 */
+	@Test
+	public void SphereTriangleSpot1() {
+		Scene scene = new Scene("Test scene");
+		scene.setCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)));
+		scene.setDistance(1000);
+		scene.setBackground(Color.BLACK);
+		scene.setAmbientLight(new AmbientLight(Color.BLACK, 0));
+
+		scene.addGeometries(new Sphere(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 30), //
+				60, new Point3D(0, 0, 200)), //
+				new Triangle(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 30), //
+						new Point3D(-70, 40, 0), new Point3D(-40, 70, 0), new Point3D(-68, 68, 4)));
+
+		scene.addLights(new SpotLight(new Color(400, 240, 0), //
+				new Point3D(-100, 100, -200), new Vector(1, -1, 3), 1, 1E-5, 1.5E-7));
+
+		ImageWriter imageWriter = new ImageWriter("sphereTriangleSpot1", 200, 200, 400, 400);
+		Render render = new Render(imageWriter, scene);
+
+		render.renderImage();
+		render.writeToImage();
+	}	
+	
+	/**
+	 * Sphere-Triangle shading - move spot even more close
+	 */
+	@Test
+	public void SphereTriangleSpot2() {
+		Scene scene = new Scene("Test scene");
+		scene.setCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)));
+		scene.setDistance(1000);
+		scene.setBackground(Color.BLACK);
+		scene.setAmbientLight(new AmbientLight(Color.BLACK, 0));
+
+		scene.addGeometries(new Sphere(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 30), //
+				60, new Point3D(0, 0, 200)), //
+				new Triangle(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 30), //
+						new Point3D(-70, 40, 0), new Point3D(-40, 70, 0), new Point3D(-68, 68, 4)));
+
+		scene.addLights(new SpotLight(new Color(400, 240, 0), //
+				new Point3D(-100, 100, -200), new Vector(1, -1, 3), 1, 1E-5, 1.5E-7));
+
+		ImageWriter imageWriter = new ImageWriter("sphereTriangleSpot2", 200, 200, 400, 400);
+		Render render = new Render(imageWriter, scene);
+
+		render.renderImage();
+		render.writeToImage();
+	}	
+	
+	/**
+	 * Produce a picture of a two triangles lighted by a spot light with a Sphere producing a shading
+	 */
+	@Test
+	public void trianglesSphere() {
+		Scene scene = new Scene("Test scene");
+		scene.setCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)));
+		scene.setDistance(1000);
+		scene.setBackground(Color.BLACK);
+		scene.setAmbientLight(new AmbientLight(new Color(java.awt.Color.WHITE), 0.15));
+
+		scene.addGeometries( //
+				new Triangle(Color.BLACK, new Material(0, 0.8, 60), //
+						new Point3D(-150, 150, 115), new Point3D(150, 150, 135), new Point3D(75, -75, 150)), //
+				new Triangle(Color.BLACK, new Material(0, 0.8, 60), //
+						new Point3D(-150, 150, 115), new Point3D(-70, -70, 140), new Point3D(75, -75, 150)), //
+				new Sphere(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 30), // )
+						30, new Point3D(0, 0, 115)));
+
+		scene.addLights(new SpotLight(new Color(700, 400, 400), //
+				new Point3D(40, -40, -115), new Vector(-1, 1, 4), 1, 4E-4, 2E-5));
+
+		ImageWriter imageWriter = new ImageWriter("trianglesSphere", 200, 200, 600, 600);
+		Render render = new Render(imageWriter, scene);
+
+		render.renderImage();
+		render.writeToImage();
+	}
+
+}
Index: src/unittests/ReflectionRefractionTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/unittests/ReflectionRefractionTests.java	(date 1594714867950)
+++ src/unittests/ReflectionRefractionTests.java	(date 1594714867950)
@@ -0,0 +1,136 @@
+/**
+ * 
+ */
+package unittests;
+
+import org.junit.Test;
+
+import elements.*;
+import geometries.Sphere;
+import geometries.Triangle;
+import primitives.*;
+import renderer.*;
+import scene.Scene;
+
+/**
+ * Tests for reflection and transparency functionality, test for partial shadows
+ * (with transparency)
+ * 
+ * @author dzilb
+ *
+ */
+public class ReflectionRefractionTests {
+
+	/**
+	 * Produce a picture of a sphere lighted by a spot light
+	 */
+	@Test
+	public void twoSpheres() {
+		Scene scene = new Scene("Test scene");
+		scene.setCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)));
+		scene.setDistance(1000);
+		scene.setBackground(Color.BLACK);
+		scene.setAmbientLight(new AmbientLight(Color.BLACK, 0));
+
+		scene.addGeometries(
+				new Sphere(new Color(java.awt.Color.BLUE), new Material(0.4, 0.3, 100, 0.3, 0), 50,
+						new Point3D(0, 0, 50)),
+				new Sphere(new Color(java.awt.Color.RED), new Material(0.5, 0.5, 100), 25, new Point3D(0, 0, 50)));
+
+		scene.addLights(new SpotLight(new Color(1000, 600, 0), new Point3D(-100, 100, -500), new Vector(-1, 1, 2), 1,
+				0.0004, 0.0000006));
+
+		ImageWriter imageWriter = new ImageWriter("twoSpheres", 150, 150, 500, 500);
+		Render render = new Render(imageWriter, scene);
+
+		render.renderImage();
+		render.writeToImage();
+	}
+
+
+
+	/**
+	 * Produce a picture of a sphere lighted by a spot light
+	 */
+	@Test
+	public void twoSpheresOnMirrors() {
+		Scene scene = new Scene("Test scene");
+		scene.setCamera(new Camera(new Point3D(0, 0, -10000), new Vector(0, 0, 1), new Vector(0, -1, 0)));
+		scene.setDistance(10000);
+		scene.setBackground(new Color(0,0,0));
+		scene.setAmbientLight(new AmbientLight(new Color(255, 255, 255), 0.1));
+
+		scene.addGeometries(
+				new Sphere(new Color(0, 0, 100), new Material(0.25, 0.25, 20, 0.5, 0), 400, new Point3D(-950, 900, 1000)),
+				new Sphere(new Color(100, 20, 20), new Material(0.25, 0.25, 20), 200, new Point3D(-950, 900, 1000)),
+				new Triangle(new Color(20, 20, 20), new Material(0, 0, 0, 0, 1), new Point3D(1500, 1500, 1500),
+						new Point3D(-1500, -1500, 1500), new Point3D(670, -670, -3000)),
+				new Triangle(new Color(20, 20, 20), new Material(0, 0, 0, 0, 0.5), new Point3D(1500, 1500, 1500),
+						new Point3D(-1500, -1500, 1500), new Point3D(-1500, 1500, 2000)));
+
+		scene.addLights(new SpotLight(new Color(1020, 400, 400),  new Point3D(-750, 750, 150), 
+				   new Vector(-1, 1, 4), 1, 0.00001, 0.000005));
+
+		ImageWriter imageWriter = new ImageWriter("twoSpheresMirrored", 2500, 2500, 500, 500);
+		Render render = new Render(imageWriter, scene);
+
+		render.renderImage();
+		render.writeToImage();
+	}
+	
+	/**
+	 * Produce a picture of a two triangles lighted by a spot light with a partially transparent Sphere
+	 *  producing partial shadow
+	 */
+	@Test
+	public void trianglesTransparentSphere() {
+		Scene scene = new Scene("Test scene");
+		scene.setCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)));
+		scene.setDistance(1000);
+		scene.setBackground(Color.BLACK);
+		scene.setAmbientLight(new AmbientLight(new Color(java.awt.Color.WHITE), 0.15));
+
+		scene.addGeometries( //
+				new Triangle(Color.BLACK, new Material(0.5, 0.5, 60), //
+						new Point3D(-150, 150, 115), new Point3D(150, 150, 135), new Point3D(75, -75, 150)), //
+				new Triangle(Color.BLACK, new Material(0.5, 0.5, 60), //
+						new Point3D(-150, 150, 115), new Point3D(-70, -70, 140), new Point3D(75, -75, 150)), //
+				new Sphere(new Color(java.awt.Color.BLUE), new Material(0.2, 0.2, 30, 0.6, 0), // )
+						30, new Point3D(60, -50, 50)));
+
+		scene.addLights(new SpotLight(new Color(700, 400, 400), //
+				new Point3D(60, -50, 0), new Vector(0, 0, 1), 1, 4E-5, 2E-7));
+
+		ImageWriter imageWriter = new ImageWriter("shadow with transparency", 200, 200, 600, 600);
+		Render render = new Render(imageWriter, scene);
+
+		render.renderImage();
+		render.writeToImage();
+	}
+
+	@Test
+	public void Mytest() {
+		Scene scene = new Scene("Test scene");
+		scene.setCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)));
+		scene.setDistance(1000);
+		scene.setBackground(Color.BLACK);
+		scene.setAmbientLight(new AmbientLight(new Color(java.awt.Color.WHITE), 0.15));
+
+		scene.addGeometries( //
+				new Triangle(Color.BLACK, new Material(0.5, 0.5, 60), //
+						new Point3D(-148, 150, 125), new Point3D(150, 150, 135), new Point3D(70, -55, 160)), //
+				new Triangle(Color.BLACK, new Material(0.5, 0.5, 60), //
+						new Point3D(-150, 150, 115), new Point3D(-70, -70, 140), new Point3D(75, -75, 150)), //
+				new Sphere(new Color(java.awt.Color.BLUE), new Material(0.2, 0.2, 30, 0.6, 0), // )
+						30, new Point3D(60, -50, 50)));
+
+		scene.addLights(new SpotLight(new Color(700, 400, 400), //
+				new Point3D(60, -50, -20), new Vector(0, 0, 1), 1, 4E-5, 2E-7));
+
+		ImageWriter imageWriter = new ImageWriter("test", 200, 200, 600, 600);
+		Render render = new Render(imageWriter, scene);
+
+		render.renderImage();
+		render.writeToImage();
+	}
+}
